**********-- Get the Google Chrome extension for JSON formatter,************

-- Restful services API layer

 -- XSJS and OData are in XS classic, they are rewritten in nodejs modules.
 
 -- Enable the XSJS support check box.
 
 ---------------------------
 
   In the mta.yaml file,
   
   -- Provide the HDI container resource
   --   UAA service
   --  DB module
   
   DB module is required, because DB module has to be completely deployed before nodejs module deployment
   
   -- Configuration of xs-app.json for routing info.
   
   {
	"welcomeFile": "index.html",
	"authenticationMethod": "route",
	"routes": [{
		"source": "(.*)(.xsjs)",
		"destination": "xsjs_api",
		"csrfProtection": false,
		"authenticationType": "xsuaa"
	}, {
		"source": "(.*)(.xsodata)",
		"destination": "xsjs_api",
		"authenticationType": "xsuaa"
	}]
}
 
 ---------------------

  also take a look at package.json - not to modify there,
  -- all the required modules/packages are taken here.,
  
  -- you can target to latest release of nodejs modules

-------------

Start creating the objects in lib folder

---- xsjs files

Example 1: 

// hdb_connection.xsjs
  /*eslint no-console: 0, no-unused-vars: 0, no-shadow: 0, new-cap: 0*/
/*eslint-env node, es6 */
"use strict";

var conn = $.hdb.getConnection(); //DB connection has been set up to access schema and objects
var query =
	`SELECT PURCHASEORDERID as "PurchaseOrderId", 
             PRODUCTID as "ProductID", 
             GROSSAMOUNT as "Amount" FROM "PO.Item" `;
var rs = conn.executeQuery(query);
$.response.setBody(JSON.stringify(rs));
$.response.contentType = "application/json";
$.response.status = $.net.http.OK;

// to format the data use the link http://jsonviewer.stack.hu/

----------

 some more examples,  
 
  //session_uaa.xsjs
 
 
 /*eslint no-console: 0, no-unused-vars: 0, dot-notation: 0*/
/*eslint-env node, es6 */
"use strict";

function fillSessionInfo(){
	var body = "";
	body = JSON.stringify({
		"session" : [{"UserName": $.session.getUsername(), "Language": $.session.language}]
	});
	$.response.contentType = "application/json";
	$.response.setBody(body);
	$.response.status = $.net.http.OK; 
}


var aCmd = $.request.parameters.get("cmd");
switch (aCmd) {
case "getSessionInfo":
	fillSessionInfo();
	break; 
default:
	$.response.status = $.net.http.INTERNAL_SERVER_ERROR;
	$.response.setBody("Invalid Request Method");
}

//?cmd=getSessionInfo  --- add this command to the end of web link
----------------------------------
Example 2: 
//call_procedures.xsjs

/*eslint no-console: 0, no-unused-vars: 0, dot-notation: 0, no-use-before-define: 0*/
/*eslint-env node, es6 */
"use strict";

/**
@function JSON as returned by hdb 
*/
function hdbDirectTest() {
	var results = _selection();
	//Pass output to response		
	$.response.status = $.net.http.OK;
	$.response.contentType = "application/json";
	$.response.setBody(JSON.stringify(results));

}

/**
@function Flattended JSON structure
*/
function hdbFlattenedTest() {
	outputJSON(_selection().EX_TOP_3_EMP_PO_COMBINED_CNT);
}

/**
@function load/call the procedure
*/
function _selection() {
	var connection = $.hdb.getConnection();

	var getPOHeaderData = connection.loadProcedure(
		"get_po_header_data");

	var results = getPOHeaderData();
	return results;
}

/**
@function Puts a JSON object into the Response Object
@param {object} jsonOut - JSON Object
*/
function outputJSON(jsonOut) {
	var out = [];
	for (let item of jsonOut){
		out.push(item);
	}
	$.response.status = $.net.http.OK;
	$.response.contentType = "application/json";
	$.response.setBody(JSON.stringify(out));
}

var aCmd = $.request.parameters.get("cmd");
switch (aCmd) {
	case "direct":
		hdbDirectTest();
		break;
	case "flattened":
		hdbFlattenedTest();
		break;
	default:
		hdbDirectTest();
		break;
}

------------------------------------
Example 3

//nodejs_module.xsjs

/*eslint no-console: 0, no-unused-vars: 0*/
/*eslint-env node, es6 */
"use strict";

var os = $.require("os");
var output = {};

output.tmpdir = os.tmpdir();
output.endianness = os.endianness();
output.hostname = os.hostname();
output.type = os.type();
output.platform = os.platform();
output.arch = os.arch();
output.release = os.release();
output.uptime = os.uptime();
output.loadavg = os.loadavg();
output.totalmem = os.totalmem();
output.freemem = os.freemem();
output.cpus = os.cpus();
output.networkInfraces = os.networkInterfaces();


$.response.status = $.net.http.OK;
$.response.contentType = "application/json";
$.response.setBody(JSON.stringify(output));


---------------------

Example 5,

//know_appuser.xsjs

/*eslint no-console: 0, no-unused-vars: 0, no-shadow: 0, new-cap: 0*/
/*eslint-env node, es6 */
var connection = $.hdb.getConnection();

var query = `SELECT CURRENT_USER 
					FROM "DUMMY"`;
var rs = connection.executeQuery(query);
var currentUser = rs[0].CURRENT_USER;

query = `SELECT SESSION_CONTEXT('APPLICATIONUSER') "APPLICATION_USER" 
                FROM "DUMMY"`;
rs = connection.executeQuery(query);
var applicationUser = rs[0].APPLICATION_USER;

var greeting =
	`XS Layer Session User: ${$.session.getUsername()}
    </br>Database Current User: ${currentUser} 
    </br> Database Application User: ${applicationUser}
    </br>Welcome to HANA `;

$.response.contentType = "text/html; charset=utf-8";
$.response.setBody(greeting);

----

Save and Run, it runs for while for the first time. But next time it is just the delta.

------

Run the Web Module, replace index.html with index.xsjs

---------------

